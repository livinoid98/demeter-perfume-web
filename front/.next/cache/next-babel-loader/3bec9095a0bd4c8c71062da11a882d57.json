{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(login),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(signUp),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogin),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchSignUp),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport axios from 'axios';\nimport { all, call, put, fork, takeLatest, getContext } from 'redux-saga/effects';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from '../reducers/user';\n\nfunction loginAPI(loginData) {\n  return axios.post('/api/user/login', loginData, {\n    withCredentials: true\n  });\n}\n\nfunction signUpAPI(signUpData) {\n  return axios.post('/api/user/', signUpData);\n}\n\nfunction login(action) {\n  var result, history;\n  return _regeneratorRuntime.wrap(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(loginAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return getContext('history');\n\n        case 6:\n          history = _context.sent;\n          _context.next = 9;\n          return put({\n            type: LOG_IN_SUCCESS,\n            data: result.data\n          });\n\n        case 9:\n          _context.next = 16;\n          break;\n\n        case 11:\n          _context.prev = 11;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 16;\n          return put({\n            type: LOG_IN_FAILURE\n          });\n\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 11]]);\n}\n\nfunction signUp(action) {\n  return _regeneratorRuntime.wrap(function signUp$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(signUpAPI, action.data);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: SIGN_UP_SUCCESS\n          });\n\n        case 5:\n          _context2.next = 12;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.error(_context2.t0);\n          _context2.next = 12;\n          return put({\n            type: SIGN_UP_FAILURE\n          });\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n}\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest(LOG_IN_REQUEST, login);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction watchSignUp() {\n  return _regeneratorRuntime.wrap(function watchSignUp$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(SIGN_UP_REQUEST, signUp);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchLogin), fork(watchSignUp)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["C:/Users/ccy98/Desktop/Demeter/front/sagas/user.js"],"names":["login","signUp","watchLogin","watchSignUp","userSaga","axios","all","call","put","fork","takeLatest","getContext","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","loginAPI","loginData","post","withCredentials","signUpAPI","signUpData","action","data","result","history","type","console","error"],"mappings":";;oDAcUA,K;qDAgBAC,M;qDAcAC,U;qDAIAC,W;qDAIeC,Q;;AApDzB,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,GAAR,EAAaC,IAAb,EAAmBC,GAAnB,EAAwBC,IAAxB,EAA8BC,UAA9B,EAA0CC,UAA1C,QAA2D,oBAA3D;AACA,SAAQC,cAAR,EAAwBC,cAAxB,EAAwCC,cAAxC,EAAwDC,eAAxD,EAAyEC,eAAzE,EAA0FC,eAA1F,QAAgH,kBAAhH;;AAEA,SAASC,QAAT,CAAkBC,SAAlB,EAA4B;AACxB,SAAOd,KAAK,CAACe,IAAN,CAAW,iBAAX,EAA8BD,SAA9B,EAAyC;AAC5CE,IAAAA,eAAe,EAAC;AAD4B,GAAzC,CAAP;AAGH;;AAED,SAASC,SAAT,CAAmBC,UAAnB,EAA8B;AAC1B,SAAOlB,KAAK,CAACe,IAAN,CAAW,YAAX,EAAyBG,UAAzB,CAAP;AACH;;AAED,SAAUvB,KAAV,CAAgBwB,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEuB,iBAAMjB,IAAI,CAACW,QAAD,EAAWM,MAAM,CAACC,IAAlB,CAAV;;AAFvB;AAEcC,UAAAA,MAFd;AAAA;AAGwB,iBAAMf,UAAU,CAAC,SAAD,CAAhB;;AAHxB;AAGcgB,UAAAA,OAHd;AAAA;AAIQ,iBAAMnB,GAAG,CAAC;AACNoB,YAAAA,IAAI,EAACf,cADC;AAENY,YAAAA,IAAI,EAACC,MAAM,CAACD;AAFN,WAAD,CAAT;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AASQI,UAAAA,OAAO,CAACC,KAAR;AATR;AAUQ,iBAAMtB,GAAG,CAAC;AACNoB,YAAAA,IAAI,EAACd;AADC,WAAD,CAAT;;AAVR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAAUb,MAAV,CAAiBuB,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQ,iBAAMjB,IAAI,CAACe,SAAD,EAAYE,MAAM,CAACC,IAAnB,CAAV;;AAFR;AAAA;AAGQ,iBAAMjB,GAAG,CAAC;AACNoB,YAAAA,IAAI,EAACZ;AADC,WAAD,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAOQa,UAAAA,OAAO,CAACC,KAAR;AAPR;AAQQ,iBAAMtB,GAAG,CAAC;AACNoB,YAAAA,IAAI,EAACX;AADC,WAAD,CAAT;;AARR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcA,SAAUf,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMQ,UAAU,CAACE,cAAD,EAAiBZ,KAAjB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUG,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMO,UAAU,CAACK,eAAD,EAAkBd,MAAlB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUG,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAME,GAAG,CAAC,CACNG,IAAI,CAACP,UAAD,CADE,EAENO,IAAI,CAACN,WAAD,CAFE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import axios from 'axios'\r\nimport {all, call, put, fork, takeLatest, getContext} from 'redux-saga/effects'\r\nimport {LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE} from '../reducers/user'\r\n\r\nfunction loginAPI(loginData){\r\n    return axios.post('/api/user/login', loginData, {\r\n        withCredentials:true,\r\n    });\r\n}\r\n\r\nfunction signUpAPI(signUpData){\r\n    return axios.post('/api/user/', signUpData);\r\n}\r\n\r\nfunction* login(action){\r\n    try{\r\n        const result = yield call(loginAPI, action.data);\r\n        const history = yield getContext('history');\r\n        yield put({\r\n            type:LOG_IN_SUCCESS,\r\n            data:result.data\r\n        });\r\n    }catch(err){\r\n        console.error(err);\r\n        yield put({\r\n            type:LOG_IN_FAILURE,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* signUp(action){\r\n    try{\r\n        yield call(signUpAPI, action.data);\r\n        yield put({\r\n            type:SIGN_UP_SUCCESS,\r\n        });\r\n    }catch(err){\r\n        console.error(err);\r\n        yield put({\r\n            type:SIGN_UP_FAILURE,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLogin(){\r\n    yield takeLatest(LOG_IN_REQUEST, login);\r\n}\r\n\r\nfunction* watchSignUp(){\r\n    yield takeLatest(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\nexport default function* userSaga(){\r\n    yield all([\r\n        fork(watchLogin),\r\n        fork(watchSignUp),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}