{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(create),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(signUp),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchCreate),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchSignUp),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport axios from 'axios';\nimport Router from 'next/router';\nimport { all, call, put, fork, takeLatest } from 'redux-saga/effects';\nimport { WRITE_POST_REQUEST } from '../reducers/post';\n\nfunction loginAPI(loginData) {\n  return axios.post('/api/user/login', loginData, {\n    withCredentials: true\n  });\n}\n\nfunction signUpAPI(signUpData) {\n  return axios.post('/api/user/', signUpData);\n}\n\nfunction create(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function create$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(createAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: WRITE_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 13;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 13;\n          return put({\n            type: LOG_IN_FAILURE\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction signUp(action) {\n  return _regeneratorRuntime.wrap(function signUp$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(signUpAPI, action.data);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: SIGN_UP_SUCCESS\n          });\n\n        case 5:\n          Router.push('/login');\n          _context2.next = 13;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.error(_context2.t0);\n          _context2.next = 13;\n          return put({\n            type: SIGN_UP_FAILURE\n          });\n\n        case 13:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 8]]);\n}\n\nfunction watchCreate() {\n  return _regeneratorRuntime.wrap(function watchCreate$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest(WRITE_POST_REQUEST, create);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction watchSignUp() {\n  return _regeneratorRuntime.wrap(function watchSignUp$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(SIGN_UP_REQUEST, signUp);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchCreate), fork(watchSignUp)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["C:/Users/ccy98/Desktop/Demeter/front/sagas/post.js"],"names":["create","signUp","watchCreate","watchSignUp","postSaga","axios","Router","all","call","put","fork","takeLatest","WRITE_POST_REQUEST","loginAPI","loginData","post","withCredentials","signUpAPI","signUpData","action","createAPI","data","result","type","WRITE_POST_SUCCESS","console","error","LOG_IN_FAILURE","SIGN_UP_SUCCESS","push","SIGN_UP_FAILURE","SIGN_UP_REQUEST"],"mappings":";;oDAeUA,M;qDAgBAC,M;qDAeAC,W;qDAIAC,W;qDAIeC,Q;;AAtDzB,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SAAQC,GAAR,EAAaC,IAAb,EAAmBC,GAAnB,EAAwBC,IAAxB,EAA8BC,UAA9B,QAA+C,oBAA/C;AACA,SAAQC,kBAAR,QAAiC,kBAAjC;;AAEA,SAASC,QAAT,CAAkBC,SAAlB,EAA4B;AACxB,SAAOT,KAAK,CAACU,IAAN,CAAW,iBAAX,EAA8BD,SAA9B,EAAyC;AAC5CE,IAAAA,eAAe,EAAC;AAD4B,GAAzC,CAAP;AAGH;;AAED,SAASC,SAAT,CAAmBC,UAAnB,EAA8B;AAC1B,SAAOb,KAAK,CAACU,IAAN,CAAW,YAAX,EAAyBG,UAAzB,CAAP;AACH;;AAED,SAAUlB,MAAV,CAAiBmB,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEuB,iBAAMX,IAAI,CAACY,SAAD,EAAYD,MAAM,CAACE,IAAnB,CAAV;;AAFvB;AAEcC,UAAAA,MAFd;AAAA;AAGQ,iBAAMb,GAAG,CAAC;AACNc,YAAAA,IAAI,EAACC,kBADC;AAENH,YAAAA,IAAI,EAACC,MAAM,CAACD;AAFN,WAAD,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAQQI,UAAAA,OAAO,CAACC,KAAR;AARR;AASQ,iBAAMjB,GAAG,CAAC;AACNc,YAAAA,IAAI,EAACI;AADC,WAAD,CAAT;;AATR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAAU1B,MAAV,CAAiBkB,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQ,iBAAMX,IAAI,CAACS,SAAD,EAAYE,MAAM,CAACE,IAAnB,CAAV;;AAFR;AAAA;AAGQ,iBAAMZ,GAAG,CAAC;AACNc,YAAAA,IAAI,EAACK;AADC,WAAD,CAAT;;AAHR;AAMQtB,UAAAA,MAAM,CAACuB,IAAP,CAAY,QAAZ;AANR;AAAA;;AAAA;AAAA;AAAA;AAQQJ,UAAAA,OAAO,CAACC,KAAR;AARR;AASQ,iBAAMjB,GAAG,CAAC;AACNc,YAAAA,IAAI,EAACO;AADC,WAAD,CAAT;;AATR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeA,SAAU5B,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMS,UAAU,CAACC,kBAAD,EAAqBZ,MAArB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUG,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMQ,UAAU,CAACoB,eAAD,EAAkB9B,MAAlB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUG,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMG,GAAG,CAAC,CACNG,IAAI,CAACR,WAAD,CADE,EAENQ,IAAI,CAACP,WAAD,CAFE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import axios from 'axios'\r\nimport Router from 'next/router'\r\nimport {all, call, put, fork, takeLatest} from 'redux-saga/effects'\r\nimport {WRITE_POST_REQUEST} from '../reducers/post'\r\n\r\nfunction loginAPI(loginData){\r\n    return axios.post('/api/user/login', loginData, {\r\n        withCredentials:true,\r\n    });\r\n}\r\n\r\nfunction signUpAPI(signUpData){\r\n    return axios.post('/api/user/', signUpData);\r\n}\r\n\r\nfunction* create(action){\r\n    try{\r\n        const result = yield call(createAPI, action.data);\r\n        yield put({\r\n            type:WRITE_POST_SUCCESS,\r\n            data:result.data,\r\n        });\r\n    }catch(err){\r\n        console.error(err);\r\n        yield put({\r\n            type:LOG_IN_FAILURE,\r\n        });\r\n    }\r\n}\r\n\r\n\r\nfunction* signUp(action){\r\n    try{\r\n        yield call(signUpAPI, action.data);\r\n        yield put({\r\n            type:SIGN_UP_SUCCESS,\r\n        });\r\n        Router.push('/login');\r\n    }catch(err){\r\n        console.error(err);\r\n        yield put({\r\n            type:SIGN_UP_FAILURE,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchCreate(){\r\n    yield takeLatest(WRITE_POST_REQUEST, create);\r\n}\r\n\r\nfunction* watchSignUp(){\r\n    yield takeLatest(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\nexport default function* postSaga(){\r\n    yield all([\r\n        fork(watchCreate),\r\n        fork(watchSignUp),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}